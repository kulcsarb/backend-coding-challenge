// Generated by BUCKLESCRIPT VERSION 5.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Random = require("bs-platform/lib/js/random.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Messages$ReactTemplate = require("./Messages.bs.js");

function emit(socket, tag, obj) {
  socket.emit(tag, obj);
  return /* () */0;
}

function onStatus(socket, func) {
  socket.on("status", (function (obj) {
          return Curry._1(func, Messages$ReactTemplate.parse_status(obj));
        }));
  return /* () */0;
}

var SocketIO = /* module */[
  /* emit */emit,
  /* onStatus */onStatus
];

var socket = new io("http://localhost:8000/");

Random.init(Date.now() | 0);

var component = ReasonReact.reducerComponent("Translator");

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return onStatus(socket, (function (status) {
                            return Curry._1(self[/* send */3], /* Update */Block.__(1, [status]));
                          }));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", undefined, React.createElement("form", undefined, React.createElement("div", {
                                  className: "form-group"
                                }, React.createElement("textarea", {
                                      className: "form-control",
                                      id: "input",
                                      onKeyDown: (function ($$event) {
                                          var match = $$event.key === "Enter";
                                          if (match) {
                                            return Curry._1(self[/* send */3], /* Enter */0);
                                          } else {
                                            return /* () */0;
                                          }
                                        }),
                                      onChange: (function ($$event) {
                                          var content = $$event.target.value;
                                          return Curry._1(self[/* send */3], /* Text */Block.__(0, [content]));
                                        })
                                    }))), React.createElement("ul", {
                              className: "list-group list-group-flush"
                            }, $$Array.of_list(List.map((function (item) {
                                        return React.createElement("li", {
                                                    key: item[/* text */1],
                                                    className: "list-group-item d-flex justify-content-between align-items-center"
                                                  }, React.createElement("p", {
                                                        className: "mb-1"
                                                      }, item[/* text */1]), React.createElement("p", {
                                                        className: "mb-1"
                                                      }, item[/* translation */2]), React.createElement("span", {
                                                        className: "badge badge-primary badge-pill"
                                                      }, item[/* status */3]));
                                      }), self[/* state */1][/* items */1]))));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* current */"",
                      /* items : [] */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              var exists = function (text) {
                return List.exists((function (i) {
                              return i[/* text */1] === text;
                            }), state[/* items */1]);
              };
              if (typeof action === "number") {
                console.log("ENTER");
                var text = state[/* current */0];
                var match = exists(text);
                if (match) {
                  return /* NoUpdate */0;
                } else {
                  var $$event = /* record */[/* text */text];
                  var new_item = /* record */[
                    /* uid */0,
                    /* text */text,
                    /* translation */"",
                    /* status */"Sent"
                  ];
                  var new_state_001 = /* items : :: */[
                    new_item,
                    state[/* items */1]
                  ];
                  var new_state = /* record */[
                    /* current */"",
                    new_state_001
                  ];
                  return /* UpdateWithSideEffects */Block.__(2, [
                            new_state,
                            (function (_self) {
                                return emit(socket, "translate", JSON.stringify($$event));
                              })
                          ]);
                }
              } else if (action.tag) {
                var status = action[0];
                var match$1 = exists(status[/* text */1]);
                if (match$1) {
                  var new_items = List.map((function (i) {
                          var match = i[/* text */1] === status[/* text */1];
                          if (match) {
                            return /* record */[
                                    /* uid */status[/* uid */0],
                                    /* text */i[/* text */1],
                                    /* translation */status[/* translation */2],
                                    /* status */status[/* status */3]
                                  ];
                          } else {
                            return i;
                          }
                        }), state[/* items */1]);
                  return /* Update */Block.__(0, [/* record */[
                              /* current */state[/* current */0],
                              /* items */new_items
                            ]]);
                } else {
                  return /* NoUpdate */0;
                }
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* current */action[0],
                            /* items */state[/* items */1]
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.SocketIO = SocketIO;
exports.socket = socket;
exports.component = component;
exports.make = make;
/* socket Not a pure module */
